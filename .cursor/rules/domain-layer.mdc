---
description: You should use the domain-layer rule when: Defining Core Business Models (Entities): When you're creating the classes or objects that represent the fundamental concepts of your business (e.g., a User, an Order, a Shipment). This includes defining their properties, validation, and business-specific methods. Establishing Data Contracts (Interfaces): When you need to specify how business objects are fetched or persisted, without tying the domain logic to a specific database technology. For example, defining an IProductRepository that outlines methods like findById or save. Implementing Business Rules: When you're writing logic that is central to how your business operates, such as validation rules (e.g., an email must be valid, an order total must be positive), or state transitions within your entities. Creating Custom Domain-Specific Errors: When you need to represent specific business-related error conditions that can occur (e.g., InsufficientStockError, InvalidCredentialsError). Developing a New Feature: To ensure the business logic of the new feature is isolated and well-defined according to clean architecture principles. Refactoring for Better Architecture: If you're restructuring existing code to improve separation of concerns, this rule guides how to isolate and protect your core business logic. Essentially, anytime you are working with the fundamental business concepts, rules, and data structures of your application, and you want to ensure they are independent of application-specific or infrastructure-specific concerns, you should refer to and apply the domain-layer rule.
globs: 
alwaysApply: false
---
[featureName]
├── domain/         # Core business logic, entities, interfaces for this feature
│     ├── entities/     # Business objects/models (e.g., User.ts, Product.ts)
│     │   └── [EntityName].ts
│     │   └── [EntityName].test.ts
│     ├── interfaces/   # Contracts for repositories or services (e.g., IUserRepository.ts)
│     │   └── I[RepositoryName].ts
│     └── errors/       # Custom domain-specific errors (e.g., UserNotFoundError.ts)
│     └── [DomainErrorName].ts

## Rules
- Core Business Logic: Contains only entities (business objects/models) and interfaces defining contracts for data or operations.
- No External Dependencies: Must not depend on Application, Infrastructure, or Presentation layers, nor any UI frameworks or browser APIs.
- Pure Code: Written in pure TypeScript/JavaScript.
- Interface-Centric: Defines interfaces (e.g., IUserRepository) that other layers (typically Infrastructure) will implement.
- Domain-Specific Validation: Includes validation logic that enforces business rules directly within entities or domain services.
- Entity-Organized: Structure is typically flat, organized around your core business entities (e.g., User.ts, Product.ts).
- Foundation Layer: It's the innermost layer; other layers depend on it, but it depends on nothing.

## Example Entity

```typescript

import { InvalidEmailError } from '../errors/InvalidEmailError';
import { RequiredFieldError } from '../errors/RequiredFieldError'; // Assuming a generic required field error

export interface UserProps {
  id: string;
  email: string;
  name: string;
  isActive: boolean;
  createdAt: Date;
}

export class User {
  private readonly _id: string;
  private _email: string;
  private _name: string;
  private _isActive: boolean;
  private readonly _createdAt: Date;

  constructor(props: UserProps) {
    if (!props.id) throw new RequiredFieldError('User ID');
    if (!props.email) throw new RequiredFieldError('User email');
    if (!props.name) throw new RequiredFieldError('User name');
    if (!/\S+@\S+\.\S+/.test(props.email)) {
      throw new InvalidEmailError('Invalid email format.');
    }

    this._id = props.id;
    this._email = props.email;
    this._name = props.name;
    this._isActive = props.isActive ?? true; 
    this._createdAt = props.createdAt;
  }

  // --- Getters ---
  get id(): string { return this._id; }
  get email(): string { return this._email; }
  get name(): string { return this._name; }
  get isActive(): boolean { return this._isActive; }
  get createdAt(): Date { return this._createdAt; }

  // --- Business Logic Methods ---


  public activate(): void {
    this._isActive = true;
    // In a real app, you might also set an `updatedAt` timestamp here.
  }

  public changeName(newName: string): void {
    if (!newName) throw new RequiredFieldError('User name');
    this._name = newName;
     // In a real app, you might also set an `updatedAt` timestamp here.
  }

  // --- Static factory method ---
  public static create(
    props: { email: string; name: string },
    idGenerator: () => string
  ): User {
    return new User({
      id: idGenerator(),
      email: props.email,
      name: props.name,
      isActive: true,
      createdAt: new Date(),
    });
  }

  // --- To Primitives ---
  public toPrimitives(): UserProps {
    return {
      id: this._id,
      email: this._email,
      name: this._name,
      isActive: this._isActive,
      createdAt: this._createdAt,
    };
  }
}
```

## Example Interface
Provide an example of a domain interface here, e.g., `IUserRepository.ts`.

```typescript

import { User } from '../entities/User';

export interface IUserRepository {
  findById(id: string): Promise<User | null>;
  findByEmail(email: string): Promise<User | null>;
  save(user: User): Promise<void>;
  delete(id: string): Promise<void>;
  // Add other common repository methods if needed, e.g., findAll, etc.
}
```

## Example Error

```typescript
export class InvalidEmailError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'InvalidEmailError';
  }
}

// Or place it in users/domain/errors if only used there
export class RequiredFieldError extends Error {
  constructor(fieldName: string) {
    super(`${fieldName} is required.`);
    this.name = 'RequiredFieldError';
  }
}

// Example of a more specific domain error
export class UserNotFoundError extends Error {
  constructor(identifier: string) {
    super(`User not found with identifier: ${identifier}`);
    this.name = 'UserNotFoundError';
  }
}
```

