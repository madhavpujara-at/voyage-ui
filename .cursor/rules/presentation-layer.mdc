---
description: You should use the presentation-layer rule when: Building User Interface (UI) Components: Creating global/shared UI components (like buttons, inputs, layouts) that can be reused across different features. These are typically organized by Atomic Design principles (atoms, molecules, organisms). Developing feature-specific UI components that are only used within a particular feature module. Developing React Hooks for UI Logic: Encapsulating UI-related state management, side effects (like data fetching), and interactions with the application layer. Creating hooks specific to a feature's UI needs or global hooks for shared UI functionalities. Structuring UI Utilities: Creating utility functions that are specific to a feature's presentation needs (e.g., formatting data for display within that feature). Developing global UI utility functions (e.g., a global date formatter used in multiple places). Defining Application Routes and Page Structure (for Next.js projects): Setting up the _app.tsx and _document.tsx files. Creating new pages for features or top-level sections of your application (e.g., index.tsx, /users/index.tsx, /products/[id].tsx). Managing Global UI State with Context: Creating or consuming React Context API providers for global UI themes, settings, or other states that affect the presentation layer. Applying Global Styles and Themes: Defining global CSS/styling rules or configuring theming for the application. Implementing Forms: Building forms using libraries like React Hook Form, including validation (e.g., with Zod), error handling, and following specific form patterns. Ensuring UI Component Best Practices: When you want to ensure components follow the single responsibility principle, are composable, receive data via props, and are testable in isolation. Structuring Page Templates: When composing components to create page layouts, ensuring templates mainly handle arrangement and delegate logic to components.
globs: 
alwaysApply: false
---
# Presentation Layer

## Structure

src/
├── components/             # GLOBAL/SHARED UI components (reusable across features)
│   ├── atoms/              # Basic building blocks (e.g., Button.tsx, Input.tsx)
│   │   └── Button.tsx
│   ├── molecules/          # Combinations of atoms (e.g., SearchBar.tsx)
│   │   └── FormField.tsx
│   ├── organisms/          # Complex UI parts (e.g., Header.tsx, Footer.tsx, GenericForm.tsx)
│   │   └── UserProfileCard.tsx
│   └── layouts/            # Page layout components (e.g., MainLayout.tsx, AuthLayout.tsx)
│       └── MainLayout.tsx
│
├── features/               # Core feature modules
│   └── [featureName]/      # Example feature (e.g., users, products)
│       └── presentation/   # Feature-specific UI components, hooks, and pages/views
│           ├── components/   # UI components used only within this feature
│           │   ├── [FeatureSpecificComponentA].tsx  // Example: UserProfile.tsx, ProductCard.tsx
│           │   └── [FeatureSpecificComponentB].tsx
│           ├── hooks/        # React hooks specific to this feature's UI
│           │   └── use[FeatureSpecificLogic].ts   // Example: useUserProfile.ts, useProductData.ts
│           └── utils/        # UI utility functions specific to this feature
│               └── [featureSpecificUtil].ts     // Example: formatUserStats.ts
│
├── pages/                  # Next.js Pages Router (defines application routes)
│   ├── _app.tsx            # Main app component (global styles, context providers)
│   ├── _document.tsx       # Custom HTML document structure
│   ├── index.tsx           # Landing page / home page
│   └── [featureName]/      # Pages related to a specific feature (e.g., /users, /products)
│       ├── index.tsx       # e.g., /[featureName] (list or main view for the feature)
│       ├── [dynamicRoute].tsx # e.g., /[featureName]/[id] (detail view, [id].tsx or [slug].tsx)
│       └── [actionPage].tsx     # e.g., /[featureName]/new (creation, edit, or other action page)
│
├── lib/                    # GLOBAL utility functions, constants, configurations
│   └── utils/              # General helper functions (e.g., stringUtils.ts, dateUtils.ts)
│       └── dateFormatter.ts  # Global date formatting utility
│
├── contexts/               # GLOBAL React Context API providers (if consumed by UI)
│   └── ThemeContext.tsx
│
└── styles/                 # Global styles, theme configuration
    ├── globals.css
    └── theme.ts

## Rules

1. **Components** should:
   - Follow single responsibility principle
   - Be reusable and composable
   - Receive data and callbacks via props
   - Not directly access application or domain layer
   - Use hooks for state and side effects
   - Be tested in isolation

2. **Templates** should (if require)
   - Compose components to create page layouts
   - Receive data from pages
   - Handle component arrangement and composition
   - Not contain business logic
   - Be as simple as possible, delegating complexity to components

3. **Hooks** should:
   - Encapsulate interaction with the application layer
   - Handle data fetching, processing, and state management
   - Provide clear and consistent interfaces
   - Abstract async operations and error handling
   - Be reusable across components

4. **Atomic Design**
   - **Atoms**: Basic building blocks (buttons, inputs, labels, icons)
   - **Molecules**: Groups of atoms that function together (form fields, search bars)
   - **Organisms**: Complex components composed of molecules and atoms (forms, tables, cards)
   - **Templates**: Page layouts with placeholder content
   - **Pages**: Templates with actual content (implemented by Next.js pages)

5. **Forms Implementation**
   - Must follow the React Hook Form patterns outlined in `docs/react-hook-form-patterns.md`
   - Use Zod schema validation for complex validation
   - Implement proper error handling with UI feedback
   - Follow the form structure and component patterns from the guidelines
   - Leverage performance optimization techniques like uncontrolled components
   - Use appropriate patterns for multi-step forms and dynamic fields

#example components

**Example 1: Shared Atom Component - A Reusable Button**

This button would be a basic building block, reusable across your entire application.

```tsx
// src/components/atoms/Button.tsx
import React from 'react';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'small' | 'medium' | 'large';
  isLoading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'medium',
  isLoading = false,
  disabled,
  leftIcon,
  rightIcon,
  className = '',
  ...props
}) => {
  const baseStyle = "font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-opacity-50";
  const variantStyles = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800 focus:ring-gray-400',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
  };
  const sizeStyles = {
    small: 'px-3 py-1.5 text-sm',
    medium: 'px-4 py-2 text-base',
    large: 'px-6 py-3 text-lg',
  };
  const loadingStyle = "opacity-75 cursor-not-allowed";
  const disabledStyle = "opacity-50 cursor-not-allowed";

  const combinedClassName = `
    ${baseStyle}
    ${variantStyles[variant]}
    ${sizeStyles[size]}
    ${isLoading ? loadingStyle : ''}
    ${disabled ? disabledStyle : ''}
    ${className}
  `.trim().replace(/\s+/g, ' ');

  return (
    <button
      type="button"
      className={combinedClassName}
      disabled={disabled || isLoading}
      {...props}
    >
      {isLoading && (
        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      )}
      {leftIcon && !isLoading && <span className="mr-2">{leftIcon}</span>}
      {children}
      {rightIcon && !isLoading && <span className="ml-2">{rightIcon}</span>}
    </button>
  );
};

export default Button;
```

**Example 2: Feature-Specific Component - Booking Calendar**

This component would be specific to the "booking" feature.


```tsx
import React, { useState } from 'react';

interface BookingCalendarProps {
  unavailableDates?: Date[];
  onDateSelect: (date: Date) => void;
  initiallySelectedDate?: Date | null;
  // ... other props specific to calendar needs, e.g., minDate, maxDate
}

const BookingCalendar: React.FC<BookingCalendarProps> = ({
  unavailableDates = [],
  onDateSelect,
  initiallySelectedDate = null,
}) => {
  const [selectedDate, setSelectedDate] = useState<Date | null>(initiallySelectedDate);
  const [currentMonth, setCurrentMonth] = useState(new Date()); // Or derived from selectedDate

  // Dummy dates for demonstration
  const today = new Date();
  const datesInMonth = Array.from({ length: 30 }, (_, i) => {
    const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i + 1);
    return date;
  });

  const handleDateClick = (date: Date) => {
    if (unavailableDates.some(d => d.toDateString() === date.toDateString())) {
      return; // Date is unavailable
    }
    setSelectedDate(date);
    onDateSelect(date);
  };

  const isDateSelected = (date: Date) => selectedDate?.toDateString() === date.toDateString();
  const isDateUnavailable = (date: Date) => unavailableDates.some(d => d.toDateString() === date.toDateString());

  // Extremely simplified calendar rendering
  return (
    <div className="p-4 border rounded-lg shadow-sm bg-white">
      <div className="flex justify-between items-center mb-4">
        {/* Basic month navigation - would be more robust in a real component */}
        <button 
            onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1))}
            className="px-2 py-1 text-sm text-blue-600 hover:bg-blue-100 rounded"
        >
          &lt; Prev
        </button>
        <h3 className="text-lg font-semibold">
          {currentMonth.toLocaleString('default', { month: 'long', year: 'numeric' })}
        </h3>
        <button 
            onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1))}
            className="px-2 py-1 text-sm text-blue-600 hover:bg-blue-100 rounded"
        >
          Next &gt;
        </button>
      </div>
      <div className="grid grid-cols-7 gap-1 text-center">
        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
          <div key={day} className="font-medium text-xs text-gray-500">{day}</div>
        ))}
        {/* This needs proper logic to align days of the week */}
        {datesInMonth.map((date, index) => (
          <button
            key={index}
            onClick={() => handleDateClick(date)}
            disabled={isDateUnavailable(date)}
            className={`
              p-2 rounded-full w-10 h-10 flex items-center justify-center
              text-sm transition-colors duration-150
              ${isDateUnavailable(date) ? 'text-gray-400 bg-gray-100 cursor-not-allowed line-through' : 'hover:bg-blue-100'}
              ${isDateSelected(date) ? 'bg-blue-500 text-white hover:bg-blue-600' : 'text-gray-700'}
              ${date.toDateString() === today.toDateString() && !isDateSelected(date) && !isDateUnavailable(date) ? 'ring-2 ring-blue-300' : ''}
            `}
          >
            {date.getDate()}
          </button>
        ))}
      </div>
      {selectedDate && (
        <p className="mt-4 text-sm text-gray-600">
          Selected: {selectedDate.toLocaleDateString()}
        </p>
      )}
    </div>
  );
};

export default BookingCalendar;
```
